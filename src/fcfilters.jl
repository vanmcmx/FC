"""
    fcfilter!(f̂::Vector{T}) where {T<:Real}

Smooth Fourier coefficients generated by  the real FFT using a filter of the routine `fcfilter`
"""
function fcfilter!(f̂::AbstractVector{T}) where {T}
    n = length(f̂)
    m = n ÷ 2 + n % 2
    σ = 2(1:m-1) / n .|> x -> fcfilter(x, N=n)
    @views f̂[2:m] .*= σ
    @views f̂[n:-1:n-m+2] .*= σ
end

"""
    fc_filter(x::Number; p::Integer, α::Real)

Gaussian filter ℯ⁻(αx²ᵖ) to control the error growth in unresolved modes of the Fourier series. 
The parameter `p` is a positive integer that controls the rate of decay of the filter coefficients
and `α` is a real number that determines the level of supression.

    fc_filter(x::Number; N::Integer)

Gaussian filter ℯ⁻(αx²ᵖ) to control the error growth in unresolved modes of the Fourier continuation
for the compressible Navier-Stokes equations. Given the number `N` of spatial grid points, the parameters are set 
as `p=3N/5` and `α=16log(10)`. See. N. Albin & O. P. Bruno [*A spectral FC solver for the compressible Navier-Stokes
equations in general domains I: explicit time-stepping.*](https://doi.org/10.1016/j.jcp.2011.04.023)

    fcfilter(x; Δt, cmax, hmin)

Gaussian filter ℯ⁻(αx²ᵖ) to control the error growth in unresolved modes of the Fourier continuation
for the propagation of elastic waves in a linear, isotropic and heterogeneous medium. 
The filter parameters are set as `p=4` and `α=-Δt⋅cmax⋅hmin⋅log(10⁻²)`, where Δt, cmax, hmin are described in the following table.
See F. Amlani & O. P. Bruno [*An FC-based spectral solver for elastodynamic problems in general three-dimensional domains.*](https://doi.org/10.1016/j.jcp.2015.11.060)

| parameter | description |
|---|:---|
| Δt| time step |
| cmax | maximum wave speed in the material |
| hmin | finest spatial step size |

"""
fc_filter(x::Number; p::Integer, α::Real) = exp(-α * x^(2.0p))

fc_filter(x::Number; N::Integer) = fc_filter(x; p=3N ÷ 5, α=16log(10))

fc_filter(x::Number; Δt::T, cmax::T, hmin::T) where {T<:Real} = fc_filter(x; p=4, α=-Δt * cmax * hmin * log(0.01))

#=
fcfilter
n = length(û)
m = n ÷ 2 + 1
σ(x) = fcfilter(x, n) # filter   
vecσ = σ.(2(1:m-1) / n)
@views û[2:m] .*= vecσ
@views û[m+1:2m-1] .*= vecσ
=#